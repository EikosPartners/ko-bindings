{"version":3,"sources":["../src/floatValue.js"],"names":[],"mappings":";;AAAA;;;;;;AAEA;;;;;AAKI,mBAAG,eAAH,CAAmB,UAAnB,GAAgC;AAC5B,UAAM,cAAU,OAAV,EAAmB,aAAnB,EAAiC;AACnC,YAAI,QAAQ,eAAZ;;AAEA;AACA,YAAG,CAAC,mBAAG,YAAH,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,oBAAQ,IAAR,CAAa,4BAAb;AACA;AACH;;AAED;AACA,iBAAS,QAAT,GAAqB;AACjB,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,QAAQ,KAAnC;AACA,gBAAI,aAAa,QAAQ,KAAR,CAAc,KAAd,CAAoB,GAApB,CAAjB;;AAEA,oBAAQ,GAAR,CAAY,UAAU,IAAV,EAAgB,KAAhB,EAAsB;AAC9B,oBAAI,QAAQ,WAAW,MAAnB,IAA6B,WAAW,WAAW,KAAX,CAAX,IAAgC,CAAhC,KAAsC,CAAvE,EAAyE;AACrE,yBAAK,KAAL,CAAW,WAAW,WAAW,KAAX,CAAX,CAAX;AACH,iBAFD,MAEO;AACH,yBAAK,KAAL,CAAW,WAAW,WAAW,QAAQ,CAAnB,CAAX,CAAX;AACH;AACJ,aAND;;AAQA,gBAAI,WAAW,MAAX,GAAoB,QAAQ,MAAhC,EAAuC;AACnC,qBAAK,IAAI,IAAI,QAAQ,MAArB,EAA6B,IAAI,WAAW,MAA5C,EAAoD,GAApD,EAAwD;AACpD,wBAAI,WAAW,WAAW,CAAX,CAAX,IAA4B,CAA5B,KAAkC,CAAtC,EAAyC;AACrC,4BAAI,OAAO;AACP,mCAAO,mBAAG,UAAH,CAAc,WAAW,WAAW,CAAX,CAAX,CAAd;AADA,yBAAX;AAGA,8BAAM,IAAN,CAAW,IAAX;AACA,gCAAQ,GAAR,CAAY,KAAK,KAAjB,EAAwB,GAAxB,EAA6B,OAA7B;AACH;AACJ;AACJ;AACJ;AACD,gBAAQ,gBAAR,CAAyB,QAAzB,EAAmC,QAAnC;;AAEA;AACA,2BAAG,KAAH,CAAS,eAAT,CAAyB,kBAAzB,CAA4C,OAA5C,EAAqD,YAAW;AAC5D,oBAAQ,mBAAR,CAA4B,QAA5B,EAAsC,QAAtC;AACH,SAFD;AAGH,KAzC2B;AA0C5B,YAAQ,gBAAU,OAAV,EAAmB,aAAnB,EAAiC;AACrC,YAAI,QAAQ,eAAZ;AACA,YAAI,QAAQ,QAAQ,GAAR,CAAY,UAAS,IAAT,EAAc;AAClC,mBAAO,KAAK,KAAL,EAAP;AACH,SAFW,CAAZ;AAGA,YAAI,aAAa,MAAM,IAAN,CAAW,GAAX,CAAjB;;AAEA;AACA,gBAAQ,KAAR,GAAgB,UAAhB;AACH;AAnD2B,CAAhC","file":"floatValue.js","sourcesContent":["import ko from 'knockout';\r\n\r\n/**\r\n * TODO - description\r\n * @module floatValue\r\n */\r\n\r\n    ko.bindingHandlers.floatValue = {\r\n        init: function (element, valueAccessor){\r\n            var input = valueAccessor();\r\n\r\n            // if input is not an observable, throw warning\r\n            if(!ko.isObservable(input)) {\r\n                console.warn('Input is not an observable');\r\n                return;\r\n            }\r\n\r\n            // handles user input and updates input observable\r\n            function onChange () {\r\n                console.log('New value: ', element.value);\r\n                var valueArray = element.value.split(',');\r\n\r\n                input().map(function (zone, index){\r\n                    if (index < valueArray.length && parseFloat(valueArray[index]) % 1 === 0){\r\n                        zone.value(parseFloat(valueArray[index]));\r\n                    } else {\r\n                        zone.value(parseFloat(valueArray[index - 1]));\r\n                    }\r\n                });\r\n\r\n                if (valueArray.length > input().length){\r\n                    for (var i = input().length; i < valueArray.length; i++){\r\n                        if (parseFloat(valueArray[i]) % 1 === 0) {\r\n                            var item = {\r\n                                value: ko.observable(parseFloat(valueArray[i]))\r\n                            };\r\n                            input.push(item);\r\n                            console.log(item.value, \":\", input());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            element.addEventListener('change', onChange);\r\n\r\n            // on dom node disposal, removes the onChange listener\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                element.removeEventListener('change', onChange);\r\n            });\r\n        },\r\n        update: function (element, valueAccessor){\r\n            var input = valueAccessor()\r\n            var zones = input().map(function(zone){\r\n                return zone.value();\r\n            });\r\n            var zoneString = zones.join(',');\r\n\r\n            // sets the value of the element to be the value of input\r\n            element.value = zoneString;\r\n        }\r\n    }\r\n"]}