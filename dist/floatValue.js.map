{"version":3,"sources":["../src/floatValue.js"],"names":["bindingHandlers","floatValue","init","element","valueAccessor","input","isObservable","console","warn","onChange","log","value","valueArray","split","map","zone","index","length","parseFloat","i","item","observable","push","addEventListener","utils","domNodeDisposal","addDisposeCallback","removeEventListener","update","zones","zoneString","join"],"mappings":";;AAAA;;;;;;AAEA;;;;;AAKI,mBAAGA,eAAH,CAAmBC,UAAnB,GAAgC;AAC5BC,UAAM,cAAUC,OAAV,EAAmBC,aAAnB,EAAiC;AACnC,YAAIC,QAAQD,eAAZ;;AAEA;AACA,YAAG,CAAC,mBAAGE,YAAH,CAAgBD,KAAhB,CAAJ,EAA4B;AACxBE,oBAAQC,IAAR,CAAa,4BAAb;AACA;AACH;;AAED;AACA,iBAASC,QAAT,GAAqB;AACjBF,oBAAQG,GAAR,CAAY,aAAZ,EAA2BP,QAAQQ,KAAnC;AACA,gBAAIC,aAAaT,QAAQQ,KAAR,CAAcE,KAAd,CAAoB,GAApB,CAAjB;;AAEAR,oBAAQS,GAAR,CAAY,UAAUC,IAAV,EAAgBC,KAAhB,EAAsB;AAC9B,oBAAIA,QAAQJ,WAAWK,MAAnB,IAA6BC,WAAWN,WAAWI,KAAX,CAAX,IAAgC,CAAhC,KAAsC,CAAvE,EAAyE;AACrED,yBAAKJ,KAAL,CAAWO,WAAWN,WAAWI,KAAX,CAAX,CAAX;AACH,iBAFD,MAEO;AACHD,yBAAKJ,KAAL,CAAWO,WAAWN,WAAWI,QAAQ,CAAnB,CAAX,CAAX;AACH;AACJ,aAND;;AAQA,gBAAIJ,WAAWK,MAAX,GAAoBZ,QAAQY,MAAhC,EAAuC;AACnC,qBAAK,IAAIE,IAAId,QAAQY,MAArB,EAA6BE,IAAIP,WAAWK,MAA5C,EAAoDE,GAApD,EAAwD;AACpD,wBAAID,WAAWN,WAAWO,CAAX,CAAX,IAA4B,CAA5B,KAAkC,CAAtC,EAAyC;AACrC,4BAAIC,OAAO;AACPT,mCAAO,mBAAGU,UAAH,CAAcH,WAAWN,WAAWO,CAAX,CAAX,CAAd;AADA,yBAAX;AAGAd,8BAAMiB,IAAN,CAAWF,IAAX;AACAb,gCAAQG,GAAR,CAAYU,KAAKT,KAAjB,EAAwB,GAAxB,EAA6BN,OAA7B;AACH;AACJ;AACJ;AACJ;AACDF,gBAAQoB,gBAAR,CAAyB,QAAzB,EAAmCd,QAAnC;;AAEA;AACA,2BAAGe,KAAH,CAASC,eAAT,CAAyBC,kBAAzB,CAA4CvB,OAA5C,EAAqD,YAAW;AAC5DA,oBAAQwB,mBAAR,CAA4B,QAA5B,EAAsClB,QAAtC;AACH,SAFD;AAGH,KAzC2B;AA0C5BmB,YAAQ,gBAAUzB,OAAV,EAAmBC,aAAnB,EAAiC;AACrC,YAAIC,QAAQD,eAAZ;AACA,YAAIyB,QAAQxB,QAAQS,GAAR,CAAY,UAASC,IAAT,EAAc;AAClC,mBAAOA,KAAKJ,KAAL,EAAP;AACH,SAFW,CAAZ;AAGA,YAAImB,aAAaD,MAAME,IAAN,CAAW,GAAX,CAAjB;;AAEA;AACA5B,gBAAQQ,KAAR,GAAgBmB,UAAhB;AACH;AAnD2B,CAAhC","file":"floatValue.js","sourcesContent":["import ko from 'knockout';\r\n\r\n/**\r\n * TODO - description\r\n * @module floatValue\r\n */\r\n\r\n    ko.bindingHandlers.floatValue = {\r\n        init: function (element, valueAccessor){\r\n            var input = valueAccessor();\r\n\r\n            // if input is not an observable, throw warning\r\n            if(!ko.isObservable(input)) {\r\n                console.warn('Input is not an observable');\r\n                return;\r\n            }\r\n\r\n            // handles user input and updates input observable\r\n            function onChange () {\r\n                console.log('New value: ', element.value);\r\n                var valueArray = element.value.split(',');\r\n\r\n                input().map(function (zone, index){\r\n                    if (index < valueArray.length && parseFloat(valueArray[index]) % 1 === 0){\r\n                        zone.value(parseFloat(valueArray[index]));\r\n                    } else {\r\n                        zone.value(parseFloat(valueArray[index - 1]));\r\n                    }\r\n                });\r\n\r\n                if (valueArray.length > input().length){\r\n                    for (var i = input().length; i < valueArray.length; i++){\r\n                        if (parseFloat(valueArray[i]) % 1 === 0) {\r\n                            var item = {\r\n                                value: ko.observable(parseFloat(valueArray[i]))\r\n                            };\r\n                            input.push(item);\r\n                            console.log(item.value, \":\", input());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            element.addEventListener('change', onChange);\r\n\r\n            // on dom node disposal, removes the onChange listener\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                element.removeEventListener('change', onChange);\r\n            });\r\n        },\r\n        update: function (element, valueAccessor){\r\n            var input = valueAccessor()\r\n            var zones = input().map(function(zone){\r\n                return zone.value();\r\n            });\r\n            var zoneString = zones.join(',');\r\n\r\n            // sets the value of the element to be the value of input\r\n            element.value = zoneString;\r\n        }\r\n    }\r\n"]}