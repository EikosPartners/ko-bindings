{"version":3,"sources":["../src/numberValue.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;AAOI,mBAAG,eAAH,CAAmB,WAAnB,GAAiC;AAC7B,UAAM,cAAU,OAAV,EAAmB,aAAnB,EAAiC;AACnC,YAAI,QAAQ,eAAZ;;;AAGA,YAAG,CAAC,mBAAG,YAAH,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,oBAAQ,IAAR,CAAa,4BAAb;AACA;AACH;;;AAGD,iBAAS,QAAT,GAAqB;AACjB,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,QAAQ,KAAnC;AACA,gBAAI,aAAa,QAAQ,KAAR,CAAc,KAAd,CAAoB,GAApB,CAAjB;;AAEA,oBAAQ,GAAR,CAAY,UAAU,KAAV,EAAiB,KAAjB,EAAuB;AAC/B,oBAAI,QAAQ,WAAW,MAAnB,IAA6B,SAAS,WAAW,KAAX,CAAT,IAA8B,CAA9B,KAAoC,CAArE,EAAuE;AACnE,0BAAM,KAAN,CAAY,SAAS,WAAW,KAAX,CAAT,EAA4B,EAA5B,CAAZ;AACH,iBAFD,MAEO;AACH,0BAAM,KAAN,CAAY,SAAS,WAAW,WAAW,MAAX,GAAoB,CAA/B,CAAT,EAA4C,EAA5C,CAAZ;AACH;AACJ,aAND;;AAQA,gBAAI,WAAW,MAAX,GAAoB,QAAQ,MAAhC,EAAuC;AACnC,qBAAK,IAAI,IAAI,QAAQ,MAArB,EAA6B,IAAI,WAAW,MAA5C,EAAoD,GAApD,EAAwD;AACpD,wBAAI,SAAS,WAAW,CAAX,CAAT,IAA0B,CAA1B,KAAgC,CAApC,EAAuC;AACnC,4BAAI,OAAO;AACX,mCAAO,mBAAG,UAAH,CAAc,SAAS,WAAW,CAAX,CAAT,EAAwB,EAAxB,CAAd;AADI,yBAAX;AAGA,8BAAM,IAAN,CAAW,IAAX;AACA,gCAAQ,GAAR,CAAY,KAAK,KAAjB,EAAwB,OAAxB;AACH;AACJ;AACJ;AACJ;AACD,gBAAQ,gBAAR,CAAyB,QAAzB,EAAmC,QAAnC;;;AAGA,2BAAG,KAAH,CAAS,eAAT,CAAyB,kBAAzB,CAA4C,OAA5C,EAAqD,YAAW;AAC5D,oBAAQ,mBAAR,CAA4B,QAA5B,EAAsC,QAAtC;AACH,SAFD;AAGH,KAzC4B;AA0C7B,YAAQ,gBAAS,OAAT,EAAkB,aAAlB,EAAgC;AACpC,YAAI,QAAQ,eAAZ;AACA,YAAI,SAAS,QAAQ,GAAR,CAAY,UAAS,KAAT,EAAe;AACpC,mBAAO,MAAM,KAAN,EAAP;AACH,SAFY,CAAb;AAGA,YAAI,cAAc,OAAO,IAAP,CAAY,GAAZ,CAAlB;;;AAGA,gBAAQ,KAAR,GAAgB,WAAhB;AACH;AAnD4B,CAAjC","file":"numberValue.js","sourcesContent":["import ko from 'knockout';\r\n\r\n/**\r\n * TODO - description\r\n * @module numberValue\r\n */\r\n\r\n    ko.bindingHandlers.numberValue = {\r\n        init: function (element, valueAccessor){\r\n            var input = valueAccessor();\r\n\r\n            // if input is not an observable, throw warning\r\n            if(!ko.isObservable(input)) {\r\n                console.warn('Input is not an observable');\r\n                return;\r\n            }\r\n\r\n            // handles user input and updates input observable\r\n            function onChange () {\r\n                console.log('New value: ', element.value);\r\n                var valueArray = element.value.split(',');\r\n\r\n                input().map(function (speed, index){\r\n                    if (index < valueArray.length && parseInt(valueArray[index]) % 1 === 0){\r\n                        speed.value(parseInt(valueArray[index], 10));\r\n                    } else {\r\n                        speed.value(parseInt(valueArray[valueArray.length - 1], 10));\r\n                    }\r\n                });\r\n\r\n                if (valueArray.length > input().length){\r\n                    for (var i = input().length; i < valueArray.length; i++){\r\n                        if (parseInt(valueArray[i]) % 1 === 0) {\r\n                            var item = {\r\n                            value: ko.observable(parseInt(valueArray[i], 10))\r\n                            };\r\n                            input.push(item);\r\n                            console.log(item.value, input());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            element.addEventListener('change', onChange);\r\n\r\n            // on dom node disposal, removes the onChange listener\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                element.removeEventListener('change', onChange);\r\n            });\r\n        },\r\n        update: function(element, valueAccessor){\r\n            var input = valueAccessor()\r\n            var speeds = input().map(function(speed){\r\n                return speed.value();\r\n            });\r\n            var speedString = speeds.join(',');\r\n\r\n            // sets the value of the element to be the value of input\r\n            element.value = speedString;\r\n        }\r\n    }\r\n"]}