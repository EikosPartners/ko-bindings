{"version":3,"sources":["../src/numberValue.js"],"names":["bindingHandlers","numberValue","init","element","valueAccessor","input","isObservable","console","warn","onChange","log","value","valueArray","split","map","speed","index","length","parseInt","i","item","observable","push","addEventListener","utils","domNodeDisposal","addDisposeCallback","removeEventListener","update","speeds","speedString","join"],"mappings":";;AAAA;;;;;;AAEA;;;;;AAKI,mBAAGA,eAAH,CAAmBC,WAAnB,GAAiC;AAC7BC,UAAM,cAAUC,OAAV,EAAmBC,aAAnB,EAAiC;AACnC,YAAIC,QAAQD,eAAZ;;AAEA;AACA,YAAG,CAAC,mBAAGE,YAAH,CAAgBD,KAAhB,CAAJ,EAA4B;AACxBE,oBAAQC,IAAR,CAAa,4BAAb;AACA;AACH;;AAED;AACA,iBAASC,QAAT,GAAqB;AACjBF,oBAAQG,GAAR,CAAY,aAAZ,EAA2BP,QAAQQ,KAAnC;AACA,gBAAIC,aAAaT,QAAQQ,KAAR,CAAcE,KAAd,CAAoB,GAApB,CAAjB;;AAEAR,oBAAQS,GAAR,CAAY,UAAUC,KAAV,EAAiBC,KAAjB,EAAuB;AAC/B,oBAAIA,QAAQJ,WAAWK,MAAnB,IAA6BC,SAASN,WAAWI,KAAX,CAAT,IAA8B,CAA9B,KAAoC,CAArE,EAAuE;AACnED,0BAAMJ,KAAN,CAAYO,SAASN,WAAWI,KAAX,CAAT,EAA4B,EAA5B,CAAZ;AACH,iBAFD,MAEO;AACHD,0BAAMJ,KAAN,CAAYO,SAASN,WAAWA,WAAWK,MAAX,GAAoB,CAA/B,CAAT,EAA4C,EAA5C,CAAZ;AACH;AACJ,aAND;;AAQA,gBAAIL,WAAWK,MAAX,GAAoBZ,QAAQY,MAAhC,EAAuC;AACnC,qBAAK,IAAIE,IAAId,QAAQY,MAArB,EAA6BE,IAAIP,WAAWK,MAA5C,EAAoDE,GAApD,EAAwD;AACpD,wBAAID,SAASN,WAAWO,CAAX,CAAT,IAA0B,CAA1B,KAAgC,CAApC,EAAuC;AACnC,4BAAIC,OAAO;AACXT,mCAAO,mBAAGU,UAAH,CAAcH,SAASN,WAAWO,CAAX,CAAT,EAAwB,EAAxB,CAAd;AADI,yBAAX;AAGAd,8BAAMiB,IAAN,CAAWF,IAAX;AACAb,gCAAQG,GAAR,CAAYU,KAAKT,KAAjB,EAAwBN,OAAxB;AACH;AACJ;AACJ;AACJ;AACDF,gBAAQoB,gBAAR,CAAyB,QAAzB,EAAmCd,QAAnC;;AAEA;AACA,2BAAGe,KAAH,CAASC,eAAT,CAAyBC,kBAAzB,CAA4CvB,OAA5C,EAAqD,YAAW;AAC5DA,oBAAQwB,mBAAR,CAA4B,QAA5B,EAAsClB,QAAtC;AACH,SAFD;AAGH,KAzC4B;AA0C7BmB,YAAQ,gBAASzB,OAAT,EAAkBC,aAAlB,EAAgC;AACpC,YAAIC,QAAQD,eAAZ;AACA,YAAIyB,SAASxB,QAAQS,GAAR,CAAY,UAASC,KAAT,EAAe;AACpC,mBAAOA,MAAMJ,KAAN,EAAP;AACH,SAFY,CAAb;AAGA,YAAImB,cAAcD,OAAOE,IAAP,CAAY,GAAZ,CAAlB;;AAEA;AACA5B,gBAAQQ,KAAR,GAAgBmB,WAAhB;AACH;AAnD4B,CAAjC","file":"numberValue.js","sourcesContent":["import ko from 'knockout';\r\n\r\n/**\r\n * TODO - description\r\n * @module numberValue\r\n */\r\n\r\n    ko.bindingHandlers.numberValue = {\r\n        init: function (element, valueAccessor){\r\n            var input = valueAccessor();\r\n\r\n            // if input is not an observable, throw warning\r\n            if(!ko.isObservable(input)) {\r\n                console.warn('Input is not an observable');\r\n                return;\r\n            }\r\n\r\n            // handles user input and updates input observable\r\n            function onChange () {\r\n                console.log('New value: ', element.value);\r\n                var valueArray = element.value.split(',');\r\n\r\n                input().map(function (speed, index){\r\n                    if (index < valueArray.length && parseInt(valueArray[index]) % 1 === 0){\r\n                        speed.value(parseInt(valueArray[index], 10));\r\n                    } else {\r\n                        speed.value(parseInt(valueArray[valueArray.length - 1], 10));\r\n                    }\r\n                });\r\n\r\n                if (valueArray.length > input().length){\r\n                    for (var i = input().length; i < valueArray.length; i++){\r\n                        if (parseInt(valueArray[i]) % 1 === 0) {\r\n                            var item = {\r\n                            value: ko.observable(parseInt(valueArray[i], 10))\r\n                            };\r\n                            input.push(item);\r\n                            console.log(item.value, input());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            element.addEventListener('change', onChange);\r\n\r\n            // on dom node disposal, removes the onChange listener\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                element.removeEventListener('change', onChange);\r\n            });\r\n        },\r\n        update: function(element, valueAccessor){\r\n            var input = valueAccessor()\r\n            var speeds = input().map(function(speed){\r\n                return speed.value();\r\n            });\r\n            var speedString = speeds.join(',');\r\n\r\n            // sets the value of the element to be the value of input\r\n            element.value = speedString;\r\n        }\r\n    }\r\n"]}