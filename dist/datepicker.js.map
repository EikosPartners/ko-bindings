{"version":3,"sources":["../src/datepicker.js"],"names":[],"mappings":"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","file":"datepicker.js","sourcesContent":["import core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport Pikaday from 'pikaday';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * TODO - description\r\n * @module datepicker\r\n */\r\n\r\n    var clone = core.object.clone;\r\n\r\n    function getTimezoneOffset(date) {\r\n        date.setTime(date.getTime() + date.getTimezoneOffset()*60*1000);\r\n        return date;\r\n    }\r\n\r\n    function parseDateExpression(ex) {\r\n        if (!ex) { return; }\r\n        var date;\r\n\r\n        if (Date.parse(ex)) {\r\n            date = new Date(ex);\r\n        }\r\n\r\n        if (ex === 'currentDate') {\r\n            date = new Date();\r\n        }\r\n\r\n        if (ex.indexOf('currentDate') !== -1) {\r\n            var expression = ex.replace('currentDate', 'new Date().getDate()')\r\n                .replace('yr', '*365'),\r\n                date = new Date(),\r\n                ret = eval(expression);\r\n\r\n            date.setDate(ret);\r\n            date;\r\n        }\r\n        date.setHours(0,0,0,0);\r\n        return date;\r\n    }\r\n\r\n    function convertDateFormat(d) {\r\n        return d ? d.substring(0,2) + '/' +\r\n                   d.substring(2,4) + '/' +\r\n                   d.substring(4)\r\n                 : '';\r\n    }\r\n\r\n\r\n    ko.bindingHandlers.datepicker = {\r\n        init: function (element, valueAccessor) {\r\n            var date = clone(valueAccessor()),\r\n                errorObservable = date.errorObservable,\r\n                errorMessage = date.errorMessage || 'Date is disabled',\r\n                yearRange, format, rawFormat, data, raw,\r\n                maxDate = ko.unwrap(date.maxDate),\r\n                minDate = ko.unwrap(date.minDate),\r\n                picker,\r\n                previousValue,\r\n                disableDayFn,\r\n                disableWeekends,\r\n                day;\r\n\r\n            if (!ko.isObservable(date.data)) {\r\n                console.error('Datepicker data must be bound to an observable');\r\n                return;\r\n            }\r\n\r\n            data = date.data\r\n\r\n            if (!ko.isObservable(date.raw)) {\r\n                raw = date.data\r\n            } else {\r\n                raw = date.raw\r\n            }\r\n\r\n            date['field'] = element;\r\n\r\n            //defaults\r\n            date['format'] = date['format'] || 'ddd, MMM DD YYYY';\r\n            date['yearRange'] = date['yearRange'] || 100;\r\n            //date['maxDate'] = date['maxDate'];\r\n            //date['minDate'] = date['minDate'];\r\n            rawFormat = date['rawFormat'] || undefined;\r\n            date['disableDayFn'] = date['enabledDate'];\r\n            date['disableWeekends'] = date['disableWeekends'];\r\n            // because date object gets muated by pikaday we lose configurations\r\n            // disableWeekday flag needed for manual user input\r\n            disableWeekends = date.disableWeekends;\r\n            //binding data to observable\r\n            date['onSelect'] = function (d) {\r\n                //data(d);\r\n                raw(this.getMoment().format(rawFormat));\r\n                errorObservable && errorObservable(null);\r\n            }\r\n\r\n            minDate = parseDateExpression(minDate);\r\n            maxDate = parseDateExpression(maxDate);\r\n\r\n            // remove minDate/maxDate from date picker as it wipes it out (use disableDatFn instead)\r\n            delete date.minDate;\r\n            delete date.maxDate;\r\n\r\n            function dateInRange(d) {\r\n                var valid = true;\r\n                if (minDate) {\r\n                    valid = minDate <= d;\r\n                }\r\n                if (maxDate) {\r\n                    valid = valid && maxDate >= d;\r\n                }\r\n                return !valid;\r\n            }\r\n\r\n            function setDate(d) {\r\n                var date = moment(d).toDate();\r\n                picker.setDate(date, true);  \r\n            }\r\n\r\n            if (date['disableDayFn']) {\r\n                day = date['disableDayFn'];\r\n                disableDayFn = function (d){\r\n                    if (d.getDate() == day) {\r\n                        return dateInRange(d);\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                }\r\n                date['disableDayFn'] = disableDayFn;\r\n            } else {\r\n                if (minDate || maxDate) {\r\n                    disableDayFn = dateInRange;\r\n                }\r\n                date['disableDayFn'] = dateInRange;\r\n            }\r\n\r\n        /* observable setting of min/max date disabled for now till refactor\r\n            if (ko.isObservable(maxDate)) {\r\n                date.maxDate = maxDate();\r\n                maxDate.subscribe(function (mx) {\r\n                    var newDate = parseDateExpression(mx);\r\n                    if (picker.getDate() > newDate) {\r\n                        picker.setDate(null);\r\n                    }\r\n                    picker.setMaxDate(newDate);\r\n                });\r\n            }\r\n            if (ko.isObservable(minDate)) {\r\n                date.minDate = minDate();\r\n                minDate.subscribe(function (mn) {\r\n                    var newDate = parseDateExpression(mn);\r\n                    if (picker.getDate() < newDate) {\r\n                        picker.setDate(null);\r\n                    }\r\n                    picker.setMinDate(newDate);\r\n                });\r\n            }\r\n            */\r\n\r\n            picker = new Pikaday( date )\r\n\r\n            if (typeof data() === 'string') {\r\n                // need to account for timezone offset before\r\n                // date object returns from pikaday, else it's\r\n                // off by one day\r\n                setDate(data());\r\n                // var date = new Date(data());\r\n                //     date = getTimezoneOffset(date);\r\n                //     picker.setDate(date, true);\r\n            } else {\r\n                picker.setDate(data(),true)\r\n            }\r\n\r\n            raw.subscribe(function (d) {\r\n                if (typeof d === 'string') {\r\n                    //var date = new Date(d);\r\n                    //date = getTimezoneOffset(date);\r\n                    //picker.setDate(date, true);\r\n                    setDate(d);\r\n                } else {\r\n                    picker.setDate(d, true);\r\n                }\r\n            });\r\n\r\n            // this \"workaround\" is necessary for touch screens as pikaday has an issue with it\r\n            // https://github.com/dbushell/Pikaday/issues/406\r\n            if ('ontouchend' in document) {\r\n                picker.el.addEventListener('mousedown', picker._onMouseDown, true);\r\n            }\r\n\r\n            //prevent user keypresses\r\n            // element.onkeydown = function (event) {\r\n            //     event.preventDefault();\r\n            // }\r\n\r\n            element.addEventListener('blur',function (event) {\r\n                var dateObject;\r\n                // prevent issues with selecting dropdown value on pikaday control\r\n                // by returning if the user did not input a different value\r\n                if(element.value === previousValue) { return; }\r\n                // if the user removes the date, update the input value to blank\r\n                if(element.value === '') { data(''); }\r\n                dateObject = new Date(element.value);\r\n                // if the user enters a disabled date on the datepicker, set the customError messahe\r\n                if((disableDayFn && disableDayFn(dateObject)) || (disableWeekends && [0,6].indexOf(dateObject.getDay()) !== -1)) {\r\n                    //element.value = previousValue; //uncomment if you want disable date to be removed automatically\r\n                    errorObservable && errorObservable(errorMessage);\r\n                    return;\r\n                } else {\r\n                    errorObservable && errorObservable(null);\r\n                }\r\n                // store previous value, fixes bug with selecting year from dropdown\r\n                previousValue = element.value;\r\n                // finally, the user has updated the date and needs to be set\r\n                picker.setDate(element.value);\r\n            });\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                picker.destroy();\r\n            });\r\n        }\r\n    }\r\n"]}