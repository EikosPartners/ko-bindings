{"version":3,"sources":["../src/clickoff.js"],"names":["has","object","canClickOff","element","clickTarget","cls","index","value","className","baseVal","split","filterFunc","indexOf","Element","isEqualNode","some","includes","excludes","parentNode","init","valueAccessor","allBindings","viewModel","va","wasRemoved","eventListener","Function","handler","TypeError","bind","event","call","target","apply","arguments","document","body","addEventListener","utils","domNodeDisposal","addDisposeCallback","removeEventListener","bindingHandlers","clickOff"],"mappings":"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","file":"clickoff.js","sourcesContent":["import core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\n/**\r\n * A knockout binding that is used to allow detection of clicking on another element i.e. \"clicking off\"\r\n * @param {function} clickOff - the function that is called when click off\r\n * @param {object} clickOff - a configuration object with additional parameters to modify the behaviour of click off\r\n * @param {function} clickOff.handler -  the function that is called when click off\r\n * @param {string[]|HTMLElement[]} [clickOff.includes] - an array of class names or html dom elements that when clicked on will invoke the handler\r\n * @param {string[]|HTMLElement[]} [clickOff.excludes] - an array of class names or html dom elements that when clicked on will <strong>not</strong> invoke the handler\r\n * \r\n * @example <caption>Passing a function to value accessor</caption>\r\n * clickOff: function() {\r\n *   alert('it works!');\r\n * }\r\n * @example <caption>Passing an object with includes and excludes</caption>\r\n * clickOff: {\r\n *    handler: function ( ) {\r\n *        alert('it works!');\r\n *    },\r\n *    includes: ['clickOn', 'mainContent'],\r\n *    excludes: ['clickOff', 'titleBar']\r\n * }\r\n * @module clickOff\r\n */\r\n\r\n\r\n    let has = core.object.has;\r\n\r\n    /**\r\n     *\r\n     * 1. click off should be invoked if the click target is not the element\r\n     *    or a child of the element bound to click-off\r\n     * 2. click off should also be invoked if the target or one of the parents\r\n     *    of the target include a class name that matches this.includes\r\n     * 3. the opposite applies for this.excludes\r\n     * @private\r\n     * @param  {HTMLElement} element        the element that has click-off bound to it\r\n     * @param  {HTMLElement} clickTarget    the target of the click\r\n     * @return {boolean}\r\n     */\r\n\r\n    function canClickOff(element, clickTarget) {\r\n        let cls, index, value;\r\n\r\n        //loop from click target to root parent of click target\r\n        while (has(clickTarget)) {\r\n\r\n            if (element === clickTarget) {\r\n                return false;\r\n            }\r\n\r\n            //clickTarget.className.baseVal is the way to get classNames for SVG elements (path, etc)\r\n            if(has(clickTarget.className, 'baseVal')) {\r\n                cls = clickTarget.className.baseVal.split(' ');\r\n            } else {\r\n                cls = (clickTarget.className || '').split(' ');\r\n            }\r\n\r\n\r\n            let filterFunc = (value) => {\r\n                return (typeof value === 'string' && cls.indexOf(value) > -1)\r\n                    || (value instanceof Element && value.isEqualNode(clickTarget));\r\n            }\r\n\r\n\r\n            if(_.some(this.includes, filterFunc)) {\r\n                return true;\r\n            }\r\n\r\n\r\n            if(_.some(this.excludes, filterFunc)) {\r\n                return false;\r\n            }\r\n\r\n            // move up in the dom\r\n            clickTarget = clickTarget.parentNode;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * clickOff binding - A binding that invokes a handler when the user clicks somewhere else\r\n     * @private\r\n     * @param  {HTMLElement} element        the dom element clickOff is bound to\r\n     * @param  {Function} valueAccessor     the options passed to the clickOff binding\r\n     * @param  {type} allBindings           description\r\n     * @param  {type} viewModel             description\r\n     */\r\n    function init( element, valueAccessor, allBindings, viewModel ) {\r\n        let va = valueAccessor(),\r\n            wasRemoved = false,\r\n            eventListener;\r\n\r\n        if (!has(va)) {\r\n            return;\r\n        }\r\n\r\n        // Normalize value accessor\r\n        if (va instanceof Function) {\r\n            // convert function to expected object\r\n            va = {\r\n                handler: va,\r\n                includes: va.includes,\r\n                excludes: va.excludes\r\n            };\r\n        }\r\n\r\n        // enforce handler function\r\n        if (! (va.handler instanceof Function)) {\r\n            throw new TypeError('clickoff: handler function required');\r\n        }\r\n\r\n        va.handler = va.handler.bind(viewModel);\r\n\r\n        // provide defaults for includes and excludes\r\n        if(!has(va.includes)) {\r\n            va.includes = ['clickoff'];\r\n        }\r\n        if(!has(va.excludes)) {\r\n            va.excludes = ['no-clickoff'];\r\n        }\r\n\r\n        eventListener = function ( event ) {\r\n            if (wasRemoved) { return; }\r\n            if (canClickOff.call(va, element, event.target)) {\r\n                va.handler.apply(this, [arguments,[element]]);\r\n            }\r\n        };\r\n\r\n        // add handler to body and create dom removal callback for cleanup\r\n        document.body.addEventListener('click', eventListener);\r\n        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n            wasRemoved = true;\r\n            document.body.removeEventListener('click', eventListener);\r\n        });\r\n    }\r\n\r\n    ko.bindingHandlers.clickOff = {\r\n        init: init\r\n    };\r\n"]}