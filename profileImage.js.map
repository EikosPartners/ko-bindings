{"version":3,"sources":["../src/profileImage.js"],"names":["token","defaultUrl","get","object","getToken","callback","ajax","type","url","success","data","textStatus","request","getResponseHeader","error","errorThrown","console","bindingHandlers","profileImage","init","element","valueAccessor","allBindingsAccessor","userId","imageSrc","observable","size","nameOnRight","setProfileImage","imageUrl","json","xmlToJson","initialName","displayName","applyBindingsToNode","template","name","controlsDescendantBindings","xml","obj","nodeType","attributes","length","j","attribute","item","nodeName","nodeValue","hasChildNodes","i","childNodes","push","old"],"mappings":"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","file":"profileImage.js","sourcesContent":["/*global define */\r\nimport core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport $ from 'jquery';\r\n\r\n/**\r\n * TODO - description\r\n * @module profileImage\r\n */\r\n\r\n    var token,\r\n        defaultUrl = '/gmep/images/default-profile-photo.png',\r\n        get = core.object.get;\r\n\r\n    function getToken(callback) {\r\n        $.ajax({\r\n           type: 'GET',\r\n           url:'/rest/api/resourceIndex',\r\n           success: function(data, textStatus, request){\r\n             token = request.getResponseHeader('X-Oracle-RF-Token');\r\n             callback();\r\n           },\r\n           error: function (request, textStatus, errorThrown) {\r\n            console.error('Error to get Token: '+errorThrown);\r\n            callback();\r\n           }\r\n        });\r\n    }\r\n\r\n    ko.bindingHandlers.profileImage = {\r\n        init: function (\r\n            element,\r\n            valueAccessor,\r\n            allBindingsAccessor\r\n        ) {\r\n            var userId = valueAccessor(),\r\n                imageSrc = ko.observable({}),\r\n                size = allBindingsAccessor().size || 'small',\r\n                nameOnRight = allBindingsAccessor().nameOnRight || false;\r\n\r\n            function setProfileImage() {\r\n               // at this point, if there is no user id or no token\r\n               // then we should just show a default image.\r\n               if(!userId || !token) {\r\n                   imageSrc({\r\n                    imageUrl: defaultUrl,\r\n                    size: size\r\n                   });\r\n                   return;\r\n               }\r\n\r\n                $.ajax({\r\n                   url: '/rest/api/gmep/share/profile/' + userId + '?utoken=' + token,\r\n                   success: function (data) {\r\n                    var json = xmlToJson(data),\r\n                        imageUrl = get(json, 'profileResponse.imageURL.#text'),\r\n                        initialName = get(json, 'profileResponse.initialName.#text'),\r\n                        displayName = get(json, 'profileResponse.displayName.#text');\r\n\r\n                    if (imageUrl) {\r\n                       imageUrl = '/webcenter' + imageUrl;\r\n                    } else if (!initialName) {\r\n                        imageUrl = defaultUrl;\r\n                    }\r\n\r\n                    imageSrc({\r\n                        initialName: initialName,\r\n                        imageUrl: imageUrl,\r\n                        displayName: displayName,\r\n                        size: size,\r\n                        nameOnRight: nameOnRight\r\n                    });\r\n\r\n                   },\r\n                   error: function () {\r\n                       imageSrc({\r\n                        imageUrl: defaultUrl,\r\n                        size: size\r\n                       });\r\n                   }\r\n                });\r\n            }\r\n\r\n            ko.applyBindingsToNode(element, { template: { name: 'profile_picture_template', data: imageSrc } });\r\n\r\n            // if the token already exists, can just get images\r\n            if(token) {\r\n                setProfileImage();\r\n            } else {\r\n            // otherwise, first get the token then set the profile iamge.\r\n                getToken(setProfileImage);\r\n            }\r\n\r\n            return { controlsDescendantBindings: true };\r\n        }\r\n    };\r\n\r\n    //No pesky logs!\r\n    ko.bindingHandlers.size = ko.bindingHandlers.size || {};\r\n    ko.bindingHandlers.nameOnRight = ko.bindingHandlers.nameOnRight || {};\r\n\r\n    function xmlToJson(xml) {\r\n      // Create the return object\r\n      var obj = {};\r\n\r\n      if (xml.nodeType == 1) { // element\r\n          // do attributes\r\n          if (xml.attributes.length > 0) {\r\n          obj[\"@attributes\"] = {};\r\n              for (var j = 0; j < xml.attributes.length; j++) {\r\n                  var attribute = xml.attributes.item(j);\r\n                  obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n              }\r\n          }\r\n      } else if (xml.nodeType == 3) { // text\r\n          obj = xml.nodeValue;\r\n      }\r\n\r\n      // do children\r\n      if (xml.hasChildNodes()) {\r\n          for(var i = 0; i < xml.childNodes.length; i++) {\r\n              var item = xml.childNodes.item(i);\r\n              var nodeName = item.nodeName;\r\n              if (typeof(obj[nodeName]) == \"undefined\") {\r\n                  obj[nodeName] = xmlToJson(item);\r\n              } else {\r\n                  if (typeof(obj[nodeName].push) == \"undefined\") {\r\n                      var old = obj[nodeName];\r\n                      obj[nodeName] = [];\r\n                      obj[nodeName].push(old);\r\n                  }\r\n                  obj[nodeName].push(xmlToJson(item));\r\n              }\r\n          }\r\n      }\r\n      return obj;\r\n    }\r\n"]}